-module(marvin_pdu_dispatch_resumed_tests).

-include_lib("eunit/include/eunit.hrl").
-include("marvin_discord.hrl").
-include("marvin_pdu.hrl").
-include_lib("marvin_helper/include/marvin_specs_tests.hrl").


-spec ?test_spec(test).

%% automatically generated by eunit


-spec ?test_spec(t01_can_get_new_test).

t01_can_get_new_test() ->
    marvin_pdu_dispatch_resumed:new([<<"trace_part">>]).

-spec ?test_spec(t02_can_get_fields_from_opaque_test).

t02_can_get_fields_from_opaque_test() ->
    PDU0 = marvin_pdu_dispatch_resumed:new([<<"trace_part">>]),
    ?assertEqual([<<"trace_part">>], marvin_pdu_dispatch_resumed:trace(PDU0)).

-spec ?test_spec(t03_can_set_fields_to_opaque_test).

t03_can_set_fields_to_opaque_test() ->
    PDU0 = marvin_pdu_dispatch_resumed:new([<<"trace_part">>]),
    PDU1 = marvin_pdu_dispatch_resumed:trace([<<"another_trace_part">>], PDU0),
    ?assertEqual([<<"another_trace_part">>], marvin_pdu_dispatch_resumed:trace(PDU1)).

-spec ?test_spec(t04_can_render_valid_opaque_test).

t04_can_render_valid_opaque_test() ->
    PDU0 = marvin_pdu_dispatch_resumed:new([<<"trace_part">>]),
    ?assertMatch({ok, _Message}, marvin_pdu:render(PDU0)).

-spec ?test_spec(t99_can_get_valid_parsed_test).

t99_can_get_valid_parsed_test() ->
    {ok, JSONBin} = file:read_file(
        code:priv_dir(marvin_pdu) ++ "/marvin_pdu_dispatch_resumed_test.json"),
    ?assertMatch({ok, {?marvin_pdu_dispatch_resumed(_), 1337}}, marvin_pdu:parse(JSONBin)).
